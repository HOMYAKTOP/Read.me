{"cells":[{"cell_type":"markdown","metadata":{"id":"8hJfL9b2l439"},"source":["ФИО"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1731497010562,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"},"user_tz":-300},"id":"wRnqvYOkl6EX","outputId":"ee570c33-c354-454a-d86a-e4c4af092186"},"outputs":[{"name":"stdout","output_type":"stream","text":["Скареднов Никита Андреевич\n"]}],"source":["print ('Скареднов Никита Андреевич')"]},{"cell_type":"markdown","metadata":{"id":"weOtPwPQmgpD"},"source":["# Дисклеймер"]},{"cell_type":"markdown","metadata":{"id":"LznB3uscmjDa"},"source":["В данной практике вам необходимо применить все ваши знания по темам:\n","\n","- Функции\n","- Словари\n","- Списки\n","- Множества\n","- Условные конструкции\n","- Запросы\n","\n","и все что было изучено на прошлых практических занятиях\n","\n","В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно"]},{"cell_type":"markdown","metadata":{"id":"7nSJIqkTvC_C"},"source":["# Задание 0"]},{"cell_type":"markdown","metadata":{"id":"exACjTiVvGUe"},"source":["Создайте функцию по нахождению уникальных элементов из двух списков\n","\n","\n","\n","```\n","a = [1, 2, 3, 4]\n","b = [3, 4, 5, 6]\n","```\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":305,"status":"ok","timestamp":1731498473340,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"},"user_tz":-300},"id":"dQheNSYd4nd2","outputId":"62b4166f-6be8-459d-c52a-24c1d5d471e0"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1, 2, 5, 6]\n"]}],"source":["def unique_elements(list1, list2):\n","    set1 = set(list1)\n","    set2 = set(list2)\n","    unique_in_list1 = set1 - set2\n","    unique_in_list2 = set2 - set1\n","    unique_elements = unique_in_list1.union(unique_in_list2)\n","    return list(unique_elements)\n","\n","a= [1, 2, 3, 4]\n","b= [3, 4, 5, 6]\n","\n","result = unique_elements(a, b)\n","print(result)"]},{"cell_type":"markdown","metadata":{"id":"RcKA-VEqpC7f"},"source":["Симулятор виртуального питомца\n","\n","Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.\n","\n","Требования:\n","\n","- Функция для усыновления питомца (имя, тип, возраст).\n","- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.\n","- Функция для отображения состояния питомца (голод, радость, энергия)."]},{"cell_type":"markdown","metadata":{"id":"SVWNlBALpCNo"},"source":["# Задание 1"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1038,"status":"ok","timestamp":1731852939769,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"},"user_tz":-300},"id":"hE7mF-HXpJLO","outputId":"373185db-b32d-4e98-cae3-16f24b960492"},"outputs":[{"name":"stdout","output_type":"stream","text":["Состояние Бобик:\n","Тип: Собака, Возраст: 3\n","Голод: 5, Радость: 5, Энергия: 5\n","Бобик покормлен. Уровень голода: 4\n","Бобик поиграл. Уровень счастья: 6, Уровень энергии: 4\n","Бобик спит. Уровень энергии: 6\n","Состояние Бобик:\n","Тип: Собака, Возраст: 3\n","Голод: 4, Радость: 6, Энергия: 6\n"]}],"source":["class Pet:\n","    def __init__(self, name, pet_type, age):\n","        self.name = name\n","        self.pet_type = pet_type\n","        self.age = age\n","        self.hunger = 5\n","        self.happiness = 5\n","        self.energy = 5\n","\n","    def feed(self):\n","\n","\n","        if self.hunger \u003e 0:\n","            self.hunger -= 1\n","            print(f\"{self.name} покормлен. Уровень голода: {self.hunger}\")\n","        else:\n","            print(f\"{self.name} уже сыт!\")\n","\n","\n","    def play(self):\n","\n","\n","        if self.energy \u003e 0:\n","            self.happiness += 1\n","            self.energy -= 1\n","            print(f\"{self.name} поиграл. Уровень счастья: {self.happiness}, Уровень энергии: {self.energy}\")\n","        else:\n","            print(f\"{self.name} слишком устал для игры!\")\n","\n","\n","    def sleep(self):\n","\n","        self.energy = min(10, self.energy + 2)\n","\n","        print(f\"{self.name} спит. Уровень энергии: {self.energy}\")\n","\n","\n","    def display_status(self):\n","        print(f\"Состояние {self.name}:\")\n","        print(f\"Тип: {self.pet_type}, Возраст: {self.age}\")\n","        print(f\"Голод: {self.hunger}, Радость: {self.happiness}, Энергия: {self.energy}\")\n","\n","\n","def adopt_pet(name, pet_type, age):\n","\n","\n","    return Pet(name, pet_type, age)\n","\n","\n","my_pet = adopt_pet(\"Бобик\", \"Собака\", 3)\n","my_pet.display_status()\n","my_pet.feed()\n","my_pet.play()\n","my_pet.sleep()\n","my_pet.display_status()"]},{"cell_type":"markdown","metadata":{"id":"qZ7qFQnmssNd"},"source":["# Задание 2"]},{"cell_type":"markdown","metadata":{"id":"UaccTe7ltNvg"},"source":["Рыцарь и дракон\n","\n","Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом\n","\n","Требования:\n","\n","- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)\n","- Управление персонажем и мини сюжет\n","- Создание дракона (Имя, информация о здоровье и уроне)\n","- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)\n","- Реализовать бой между драконом и рыцарем"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":601},"executionInfo":{"elapsed":174907,"status":"error","timestamp":1731857898799,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"},"user_tz":-300},"id":"LCcxp5Q0srjY","outputId":"9bcd742c-4cba-47e2-b53c-08b937912ab0"},"outputs":[{"ename":"KeyboardInterrupt","evalue":"Interrupted by user","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-11-822401aff596\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 83\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     82\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 84\u001b[0;31m     \u001b[0mknight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_knight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     85\u001b[0m     \u001b[0mdragon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_dragon\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m     \u001b[0mgame_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mknight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdragon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m\u003cipython-input-11-822401aff596\u003e\u001b[0m in \u001b[0;36mcreate_knight\u001b[0;34m()\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcreate_knight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 46\u001b[0;31m     \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите имя рыцаря: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0marmor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите уровень брони рыцаря: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m     \u001b[0mweapon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите название оружия рыцаря: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--\u003e 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}],"source":["import random\n","class Knight:\n","    def __init__(self, name, armor, weapon, damage_range, health):\n","        self.name = name\n","        self.armor = armor\n","        self.weapon = weapon\n","        self.damage_range = damage_range\n","        self.health = health\n","\n","\n","    def attack(self):\n","\n","\n","        damage = random.randint(self.damage_range[0], self.damage_range[1])\n","        print(f\"{self.name} атакует {dragon.name} и наносит {damage} урона!\")\n","        return damage\n","\n","\n","    def take_damage(self, damage):\n","        effective_damage = max(0, damage - self.armor)\n","        self.health -= effective_damage\n","        print(f\"{self.name} получает {effective_damage} урона. Осталось здоровья: {self.health}\")\n","\n","\n","class Dragon:\n","    def __init__(self, name, health, damage_range):\n","        self.name = name\n","        self.health = health\n","        self.damage_range = damage_range\n","\n","\n","    def attack(self):\n","\n","\n","        damage = random.randint(self.damage_range[0], self.damage_range[1])\n","        print(f\"{self.name} атакует {knight.name} и наносит {damage} урона!\")\n","        return damage\n","\n","\n","    def take_damage(self, damage):\n","        self.health -= damage\n","        print(f\"{self.name} получает {damage} урона. Осталось здоровья: {self.health}\")\n","\n","\n","def create_knight():\n","    name = input(\"Введите имя рыцаря: \")\n","    armor = int(input(\"Введите уровень брони рыцаря: \"))\n","    weapon = input(\"Введите название оружия рыцаря: \")\n","    min_damage = int(input(\"Введите минимальный урон оружия: \"))\n","    max_damage = int(input(\"Введите максимальный урон оружия: \"))\n","    health = int(input(\"Введите здоровье рыцаря: \"))\n","\n","\n","    return Knight(name, armor, weapon, (min_damage, max_damage), health)\n","\n","\n","def create_dragon():\n","    name = \"Дракон\"\n","    health = 100\n","    min_damage = 5\n","    max_damage = 15\n","\n","\n","    return Dragon(name, health, (min_damage, max_damage))\n","\n","\n","def game_loop(knight, dragon):\n","    print(f\"{knight.name} встретил {dragon.name}!\")\n","\n","\n","    while knight.health \u003e 0 and dragon.health \u003e 0:\n","        damage_to_dragon = knight.attack()\n","        dragon.take_damage(damage_to_dragon)\n","\n","        if dragon.health \u003c= 0:\n","            print(f\"{dragon.name} повержен! {knight.name} победил!\")\n","            break\n","        damage_to_knight = dragon.attack()\n","        knight.take_damage(damage_to_knight)\n","        if knight.health \u003c= 0:\n","            print(f\"{knight.name} пал в бою! {dragon.name} победил!\")\n","            break\n","if __name__ == \"__main__\":\n","    knight = create_knight()\n","    dragon = create_dragon()\n","    game_loop(knight, dragon)"]},{"cell_type":"markdown","metadata":{"id":"N8oFiEXol3e2"},"source":["# Задание 3\n"]},{"cell_type":"markdown","metadata":{"id":"9p4WQG_Vl7wB"},"source":["Цель - создать менеджера команды Pokémon, который позволит пользователям:\n","\n","- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n","- Удалять покемонов из их команды.\n","- Просматривать подробную информацию обо всех покемонах в команде.\n","- Находить покемона по имени.\n","- Устраивать тренировочный бой между двумя покемонами\n","\n","Для данной задачи используйте: https://pokeapi.co/\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"NnGYp1MTqi5k"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Меню:\n","1. Добавить покемона\n","2. Удалить покемона\n","3. Просмотреть команду\n","4. Найти покемона по имени\n","5. Устроить бой\n","6. Выйти\n","Выход из программы.\n","\n","Меню:\n","1. Добавить покемона\n","2. Удалить покемона\n","3. Просмотреть команду\n","4. Найти покемона по имени\n","5. Устроить бой\n","6. Выйти\n"]}],"source":["import requests\n","class PokemonManager:\n","    def __init__(self):\n","\n","\n","        self.team = []\n","\n","    def add_pokemon(self, name):\n","\n","        if name in self.team:\n","            print(f\"{name} уже в команде!\")\n","            return\n","        response = requests.get(f'https://pokeapi.co/api/v2/pokemon/{name.lower()}')\n","        if response.status_code == 200:\n","            self.team.append(name)\n","            print(f\"{name} добавлен в команду!\")\n","        else:\n","            print(\"Покемон не найден!\")\n","\n","\n","    def remove_pokemon(self, name):\n","\n","\n","        if name in self.team:\n","            self.team.remove(name)\n","            print(f\"{name} удален из команды!\")\n","        else:\n","            print(f\"{name} не в команде!\")\n","\n","    def view_team(self):\n","\n","\n","        if not self.team:\n","            print(\"В команде нет покемонов.\")\n","            return\n","        for name in self.team:\n","            self.get_pokemon_info(name)\n","\n","    def get_pokemon_info(self, name):\n","\n","\n","        response = requests.get(f'https://pokeapi.co/api/v2/pokemon/{name.lower()}')\n","        if response.status_code == 200:\n","            data = response.json()\n","            print(f\"Имя: {data['name']}, Типы: {[type['type']['name'] for type in data['types']]}, HP: {data['stats'][0]['base_stat']}\")\n","        else:\n","            print(\"Покемон не найден!\")\n","\n","    def find_pokemon(self, name):\n","\n","\n","        if name in self.team:\n","            self.get_pokemon_info(name)\n","        else:\n","            print(f\"{name} не в команде!\")\n","\n","    def battle(self, name1, name2):\n","\n","\n","        if name1 not in self.team or name2 not in self.team:\n","            print(\"Оба покемона должны быть в команде для боя.\")\n","            return\n","\n","        if name1 == name2:\n","            print(\"Бой не может быть между одним и тем же покемоном!\")\n","        else:\n","            print(f\"Бой между {name1} и {name2} начался!\")\n","\n","            import random\n","            winner = random.choice([name1, name2])\n","            print(f\"Победитель: {winner}!\")\n","\n","    def main():\n","\n","\n","     manager = PokemonManager()\n","\n","    while True:\n","        print(\"\\nМеню:\")\n","        print(\"1. Добавить покемона\")\n","        print(\"2. Удалить покемона\")\n","        print(\"3. Просмотреть команду\")\n","        print(\"4. Найти покемона по имени\")\n","        print(\"5. Устроить бой\")\n","        print(\"6. Выйти\")\n","\n","        choice = input(\"Выберите действие: \")\n","\n","        if choice == '1':\n","            name = input(\"Введите имя покемона: \")\n","            manager.add_pokemon(name)\n","        elif choice == '2':\n","            name = input(\"Введите имя покемона для удаления: \")\n","            manager.remove_pokemon(name)\n","        elif choice == '3':\n","            manager.view_team()\n","        elif choice == '4':\n","            name = input(\"Введите имя покемона для поиска: \")\n","            manager.find_pokemon(name)\n","        elif choice == '5':\n","            name1 = input(\"Введите имя первого покемона: \")\n","            name2 = input(\"Введите имя второго покемона: \")\n","            manager.battle(name1, name2)\n","        elif choice == '6':\n","            print(\"Выход из программы.\")\n","            break\n","        else:\n","            print(\"Неверный выбор! Пожалуйста, попробуйте снова.\")\n","if __name__ == \"__main__\":\n","    main()"]}],"metadata":{"colab":{"name":"","provenance":[{"file_id":"1zZbU5QXY3ZEtfsKWHQC-JGRhxn7rwGmd","timestamp":1731496919122}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}