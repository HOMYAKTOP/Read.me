{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732098454733}],"collapsed_sections":["8XGka5GtEBK1","0ct1u6lqE73j","C5DX5Uf2FfP6","b_mJHXcQGI9t"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО**: Скареднов Никита Андреевич\n"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee:\n","    # количество дней отпуска, атрибут для каждого объекта класса\n","    vacation_days = 28\n","\n","    def __init__(self, first_name, second_name, gender, amount_of_limbs):\n","        self.first_name = first_name # имя\n","        self.second_name = second_name # фамилия\n","        self.gender = gender # пол\n","        self.amount_of_limbs = amount_of_limbs # количество конечностей\n","        self.remaining_vacation_days = self.vacation_days # количество доступных дней отпуска\n","\n","\n","    # вычитание отгуляных дней\n","    def consume_vacation(self, days):\n","        self.remaining_vacation_days -= days\n","\n","    # Вывод информации об отпуске\n","    def vacation_details(self):\n","        return f\"Остаток отпускных дней: {self.remaining_vacation_days}.\"\n","\n","\n"],"metadata":{"id":"G4bUraN4CwBI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self, account_holder):\n","\n","        self.account_holder = account_holder\n","        self.balance = 0\n","\n","    def deposit(self, amount):\n","\n","\n","        if amount > 0:\n","            self.balance += amount\n","            print(f\"На счет {self.account_holder} внесено {amount}. Текущий баланс: {self.balance}.\")\n","        else:\n","            print(\"Сумма для внесения должна быть положительной.\")\n","\n","    def withdraw(self, amount):\n","\n","\n","        if amount > 0:\n","            if amount <= self.balance:\n","                self.balance -= amount\n","                print(f\"Со счета {self.account_holder} снято {amount}. Текущий баланс: {self.balance}.\")\n","            else:\n","                print(\"Недостаточно средств для снятия.\")\n","        else:\n","            print(\"Сумма для снятия должна быть положительной.\")\n","\n","    def get_balance(self):\n","\n","        return self.balance\n","\n","account = BankAccount(\"Иван Иванов\")\n","account.deposit(100)\n","account.withdraw(30)\n","account.withdraw(80)\n","print(f\"Текущий баланс {account.account_holder}: {account.get_balance()}\")"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732103388218,"user_tz":-300,"elapsed":263,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"c221ff0d-2794-41f6-c8ee-b3595a5ceed1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["На счет Иван Иванов внесено 100. Текущий баланс: 100.\n","Со счета Иван Иванов снято 30. Текущий баланс: 70.\n","Недостаточно средств для снятия.\n","Текущий баланс Иван Иванов: 70\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"s_hzmcLOcTVI"}},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self, account_holder):\n","\n","        self.account_holder = account_holder\n","        self.balance = 0\n","\n","    def deposit(self, amount):\n","\n","\n","        if amount > 0:\n","            self.balance += amount\n","            print(f\"На счет {self.account_holder} внесено {amount}. Текущий баланс: {self.balance}.\")\n","        else:\n","            print(\"Сумма для внесения должна быть положительной.\")\n","\n","    def withdraw(self, amount):\n","\n","\n","        if amount > 0:\n","            if amount <= self.balance:\n","                self.balance -= amount\n","                print(f\"Со счета {self.account_holder} снято {amount}. Текущий баланс: {self.balance}.\")\n","            else:\n","                print(\"Недостаточно средств для снятия.\")\n","        else:\n","            print(\"Сумма для снятия должна быть положительной.\")\n","\n","    def get_balance(self):\n","\n","\n","        return self.balance\n","account = BankAccount(\"Иван Иванов\")\n","account.deposit(100)\n","account.withdraw(30)\n","account.withdraw(80)\n","print(f\"Текущий баланс {account.account_holder}: {account.get_balance()}\")\n","\n"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732102343412,"user_tz":-300,"elapsed":274,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"d58bd526-fe0b-46de-a057-28f150ee9b0f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["На счет Иван Иванов внесено 100. Текущий баланс: 100.\n","Со счета Иван Иванов снято 30. Текущий баланс: 70.\n","Недостаточно средств для снятия.\n","Текущий баланс Иван Иванов: 70\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["import random\n","\n","class Knight:\n","    def __init__(self, name, armor, weapon, damage_range, health):\n","\n","        self.name = name\n","        self.armor = armor\n","        self.weapon = weapon\n","        self.damage_range = damage_range\n","        self.health = health\n","\n","    def attack(self):\n","\n","        damage = random.randint(self.damage_range[0], self.damage_range[1])\n","        print(f\"{self.name} атакует {dragon.name} и наносит {damage} урона!\")\n","        return damage\n","\n","    def take_damage(self, damage):\n","\n","        effective_damage = max(0, damage - self.armor)\n","        self.health -= effective_damage\n","        print(f\"{self.name} получает {effective_damage} урона. Осталось здоровья: {self.health}\")\n","\n","\n","class Dragon:\n","    def __init__(self, name, health, damage_range):\n","\n","        self.name = name\n","        self.health = health\n","        self.damage_range = damage_range\n","\n","    def attack(self):\n","\n","        damage = random.randint(self.damage_range[0], self.damage_range[1])\n","        print(f\"{self.name} атакует {knight.name} и наносит {damage} урона!\")\n","        return damage\n","\n","    def take_damage(self, damage):\n","\n","        self.health -= damage\n","        print(f\"{self.name} получает {damage} урона. Осталось здоровья: {self.health}\")\n","\n","\n","def create_knight():\n","\n","    name = input(\"Введите имя рыцаря: \")\n","    armor = int(input(\"Введите уровень брони рыцаря: \"))\n","    weapon = input(\"Введите название оружия рыцаря: \")\n","    min_damage = int(input(\"Введите минимальный урон оружия: \"))\n","    max_damage = int(input(\"Введите максимальный урон оружия: \"))\n","    health = int(input(\"Введите здоровье рыцаря: \"))\n","    return Knight(name, armor, weapon, (min_damage, max_damage), health)\n","\n","\n","def create_dragon():\n","    name = \"Дракон\"\n","    health = 100\n","    min_damage = 5\n","    max_damage = 15\n","    return Dragon(name, health, (min_damage, max_damage))\n","\n","\n","def game_loop(knight, dragon):\n","\n","    print(f\"{knight.name} встретил {dragon.name}!\")\n","\n","    while knight.health > 0 and dragon.health > 0:\n","        damage_to_dragon = knight.attack()\n","        dragon.take_damage(damage_to_dragon)\n","\n","        if dragon.health <= 0:\n","            print(f\"{dragon.name} повержен! {knight.name} победил!\")\n","            break\n","\n","        damage_to_knight = dragon.attack()\n","        knight.take_damage(damage_to_knight)\n","\n","        if knight.health <= 0:\n","            print(f\"{knight.name} пал в бою! {dragon.name} победил!\")\n","            break\n","\n","\n","if __name__ == \"__main__\":\n","    knight = create_knight()\n","    dragon = create_dragon()\n","    game_loop(knight, dragon)"],"metadata":{"id":"Oz9BZbhAFwua"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","\n","    def __init__(self, title: str, author: str, isbn: str):\n","\n","        self.title = title\n","        self.author = author\n","        self.isbn = isbn\n","        self.is_borrowed = False\n","\n","    def __str__(self):\n","\n","        return f\"Название: {self.title}, Автор: {self.author}, ISBN: {self.isbn}, Заимствована: {'Да' if self.is_borrowed else 'Нет'}\"\n","\n","\n","class Library:\n","\n","    def __init__(self):\n","\n","        self.books = []\n","\n","    def add_book(self, book: Book):\n","\n","        self.books.append(book)\n","        print(f\"Книга '{book.title}' добавлена в библиотеку.\")\n","\n","    def borrow_book(self, isbn: str):\n","\n","        book = self.find_book(isbn)\n","        if book is None:\n","            print(\"Книга не найдена.\")\n","        elif book.is_borrowed:\n","            print(\"Эта книга уже взята.\")\n","        else:\n","            book.is_borrowed = True\n","            print(f\"Вы одолжили книгу '{book.title}'.\")\n","\n","    def return_book(self, isbn: str):\n","\n","        book = self.find_book(isbn)\n","        if book is None:\n","            print(\"Книга не найдена.\")\n","        elif not book.is_borrowed:\n","            print(\"Эта книга не была взята.\")\n","        else:\n","            book.is_borrowed = False\n","            print(f\"Вы вернули книгу '{book.title}'.\")\n","\n","    def list_available_books(self):\n","\n","        available_books = [book for book in self.books if not book.is_borrowed]\n","        if available_books:\n","            print(\"Доступные книги:\")\n","            for book in available_books:\n","                print(book)\n","        else:\n","            print(\"Нет доступных книг.\")\n","\n","    def find_book(self, isbn: str):\n","\n","        for book in self.books:\n","            if book.isbn == isbn:\n","                return book\n","        return None\n","\n","\n","def main():\n","\n","    library = Library()\n","\n","    while True:\n","        print(\"\\nМеню библиотеки:\")\n","        print(\"1. Добавить книгу\")\n","        print(\"2. Одолжить книгу\")\n","        print(\"3. Вернуть книгу\")\n","        print(\"4. Список доступных книг\")\n","        print(\"5. Выйти из программы\")\n","\n","        choice = input(\"Выберите опцию (1-5): \")\n","\n","        if choice == '1':\n","            title = input(\"Введите название книги: \")\n","            author = input(\"Введите автора книги: \")\n","            isbn = input(\"Введите ISBN книги: \")\n","            new_book = Book(title, author, isbn)\n","            library.add_book(new_book)\n","\n","        elif choice == '2':\n","            isbn = input(\"Введите ISBN книги для одалживания: \")\n","            library.borrow_book(isbn)\n","\n","        elif choice == '3':\n","            isbn = input(\"Введите ISBN книги для возврата: \")\n","            library.return_book(isbn)\n","\n","        elif choice == '4':\n","            library.list_available_books()\n","\n","        elif choice == '5':\n","            print(\"Выход из программы.\")\n","            break\n","\n","        else:\n","            print(\"Некорректный выбор. Пожалуйста, попробуйте снова.\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"GKKmdfN8GL6f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732475995874,"user_tz":-300,"elapsed":4756,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"e8585167-c012-449b-9fac-110ab17c8cec"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Меню библиотеки:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите опцию (1-5): 5\n","Выход из программы.\n"]}]}]}