{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730285419693}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)"],"metadata":{"id":"M9IlAZAPBBm9"}},{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":["Скареднов Никита Андреевич"],"metadata":{"id":"3AfG_Tal0P2S","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"error","timestamp":1730286462583,"user_tz":-300,"elapsed":312,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"0061987a-f0c3-491c-b0cb-47a1977baae8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-1-32872c99d97e>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-32872c99d97e>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Скареднов Никита Андреевич\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода"],"metadata":{"id":"Gtm1UjYgDlY7"}},{"cell_type":"markdown","source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["import requests\n","\n","\n","latitude = 56.50\n","longitude = 60.35\n","url = f\"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true\"\n","response = requests.get(url)\n","if response.status_code == 200:\n","    weather_data = response.json()\n","    current_weather = weather_data['current_weather']\n","    temperature = current_weather['temperature']\n","    weather_description = current_weather['weathercode']\n","    weather_conditions = {\n","        0: \"ясно\",\n","        1: \"небольшая облачность\",\n","        2: \"облачно\",\n","        3: \"дождь\",\n","        4: \"снег\",\n","        5: \"туман\"\n","    }\n","\n","    description = weather_conditions.get(weather_description, \"неизвестно\")\n","    print(f\"Сегодня (1.11) погода {temperature} ◦C, {description}\")\n","else:\n","    print(\"Ошибка при получении данных о погоде.\")"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730549232208,"user_tz":-300,"elapsed":868,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"ea567c8c-7008-4783-ac65-51eb4cb11ad4"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Сегодня (1.11) погода 0.4 ◦C, неизвестно\n"]}]},{"cell_type":"code","source":["45.50"],"metadata":{"id":"DoEJcrkY8sVz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730549232209,"user_tz":-300,"elapsed":7,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"6803d212-d023-4b42-ae60-86058ec6e9b8"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["45.5"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны"],"metadata":{"id":"FYjU9WmVDoGs"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests\n","def get_pokemon_list():\n","    response = requests.get(\"https://pokeapi.co/api/v2/pokemon?limit=20\")\n","    if response.status_code == 200:\n","        data = response.json()\n","        pokemon_names = [pokemon['name'] for pokemon in data['results']]\n","        return pokemon_names\n","    else:\n","        print(\"Ошибка при получении списка покемонов.\")\n","        return []\n","def get_pokemon_info(pokemon_name):\n","\n","    response = requests.get(f\"https://pokeapi.co/api/v2/pokemon/{pokemon_name}\")\n","\n","    if response.status_code == 200:\n","\n","        data = response.json()\n","\n","        name = data['name']\n","        types = [t['type']['name'] for t in data['types']]\n","        weight = data['weight']\n","        height = data['height']\n","        abilities = [a['ability']['name'] for a in data['abilities']]\n","\n","        return {\n","            \"name\": name,\n","            \"types\": types,\n","            \"weight\": weight,\n","            \"height\": height,\n","            \"abilities\": abilities\n","        }\n","    else:\n","        print(\"Ошибка при получении информации о покемоне.\")\n","        return None\n","pokemon_list = get_pokemon_list()\n","\n","print(\"Список первых 20 покемонов:\")\n","for idx, name in enumerate(pokemon_list, start=1):\n","    print(f\"{idx}. {name}\")\n","\n","pokemon_name_input = input(\"Введите имя одного из покемонов: \").strip().lower()\n","pokemon_info = get_pokemon_info(pokemon_name_input)\n","if pokemon_info:\n","    print(\"Информация о покемоне:\")\n","    print(f\"Имя: {pokemon_info['name']}\")\n","    print(f\"Типы: {', '.join(pokemon_info['types'])}\")\n","    print(f\"Вес: {pokemon_info['weight']}\")\n","    print(f\"Рост: {pokemon_info['height']}\")\n","    print(f\"Способности: {', '.join(pokemon_info['abilities'])}\")"],"metadata":{"id":"JkFmivjp25NL","executionInfo":{"status":"ok","timestamp":1730549394270,"user_tz":-300,"elapsed":7242,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e5badc93-8c60-4f19-8ebb-65c03f714d0c"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Список первых 20 покемонов:\n","1. bulbasaur\n","2. ivysaur\n","3. venusaur\n","4. charmander\n","5. charmeleon\n","6. charizard\n","7. squirtle\n","8. wartortle\n","9. blastoise\n","10. caterpie\n","11. metapod\n","12. butterfree\n","13. weedle\n","14. kakuna\n","15. beedrill\n","16. pidgey\n","17. pidgeotto\n","18. pidgeot\n","19. rattata\n","20. raticate\n","Введите имя одного из покемонов: kakuna\n","Информация о покемоне:\n","Имя: kakuna\n","Типы: bug, poison\n","Вес: 100\n","Рост: 6\n","Способности: shed-skin\n"]}]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты"],"metadata":{"id":"Ci07uZdADue9"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","def get_posts():\n","    response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(\"Ошибка при получении постов.\")\n","        return []\n","\n","\n","def get_post_by_id(post_id):\n","    response = requests.get(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\")\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        print(f\"Ошибка при получении поста с ID {post_id}.\")\n","        return None\n","\n","\n","def display_post_info(post):\n","\n","    if post:\n","        print(\"Информация о посте:\")\n","        print(f\"ID: {post['id']}\")\n","        print(f\"Заголовок: {post['title']}\")\n","        print(f\"Содержимое: {post['body']}\")\n","        print(f\"Автор ID: {post['userId']}\")\n","    else:\n","        print(\"Пост не найден.\")\n","\n","if __name__ == \"__main__\":\n","    posts = get_posts()\n","    print(f\"Всего постов: {len(posts)}\")\n","    post_id_input = input(\"Введите ID поста для получения информации: \")\n","\n","    try:\n","        post_id = int(post_id_input)\n","        post = get_post_by_id(post_id)\n","        display_post_info(post)\n","    except ValueError:\n","        print(\"Пожалуйста, введите корректный числовой ID.\")"],"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730549511391,"user_tz":-300,"elapsed":7520,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"8111ec6c-055b-4129-b8de-e6b93ae6474c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Всего постов: 100\n","Введите ID поста для получения информации: 45\n","Информация о посте:\n","ID: 45\n","Заголовок: ut numquam possimus omnis eius suscipit laudantium iure\n","Содержимое: est natus reiciendis nihil possimus aut provident\n","ex et dolor\n","repellat pariatur est\n","nobis rerum repellendus dolorem autem\n","Автор ID: 5\n"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами"],"metadata":{"id":"rtwepQvJDy9N"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":["import requests\n","response = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\n","if response.status_code == 200:\n","    posts = response.json()\n","    print(f\"Всего постов: {len(posts)}\")\n","else:\n","    print(\"Ошибка при получении постов.\")\n","    posts = []\n","\n","post_id_input = input(\"Введите ID поста для получения информации: \")\n","try:\n","    post_id = int(post_id_input)\n","\n","\n","    post_response = requests.get(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\")\n","    if post_response.status_code == 200:\n","        post = post_response.json()\n","        print(\"Информация о посте:\")\n","        print(f\"ID: {post['id']}\")\n","        print(f\"Заголовок: {post['title']}\")\n","        print(f\"Содержимое: {post['body']}\")\n","        print(f\"Автор ID: {post['userId']}\")\n","    else:\n","        print(f\"Пост с ID {post_id} не найден.\")\n","\n","    title = input(\"Введите заголовок нового поста: \")\n","    body = input(\"Введите содержимое нового поста: \")\n","    user_id = int(input(\"Введите ID пользователя (например, 10): \"))\n","\n","    new_post_data = {\n","        \"title\": title,\n","        \"body\": body,\n","        \"userId\": user_id\n","    }\n","\n","    create_response = requests.post(\"https://jsonplaceholder.typicode.com/posts\", json=new_post_data)\n","    if create_response.status_code == 201:\n","        new_post = create_response.json()\n","        print(\"Создан новый пост:\")\n","        print(f\"ID: {new_post['id']}, Заголовок: {new_post['title']}, Содержимое: {new_post['body']}\")\n","    else:\n","        print(\"Ошибка при создании поста.\")\n","\n","    new_title = input(\"Введите новый заголовок для обновления поста: \")\n","    new_body = input(\"Введите новое содержимое для обновления поста: \")\n","\n","    updated_data = {\n","        \"title\": new_title,\n","        \"body\": new_body\n","    }\n","\n","    update_response = requests.put(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\", json=updated_data)\n","    if update_response.status_code == 200:\n","        updated_post = update_response.json()\n","        print(\"Пост обновлен:\")\n","        print(f\"ID: {updated_post['id']}, Заголовок: {updated_post['title']}, Содержимое: {updated_post['body']}\")\n","    else:\n","        print(f\"Ошибка при обновлении поста с ID {post_id}.\")\n","\n","    delete_confirmation = input(f\"Вы уверены, что хотите удалить пост с ID {post_id}? (да/нет): \")\n","\n","    if delete_confirmation.lower() == 'да':\n","        delete_response = requests.delete(f\"https://jsonplaceholder.typicode.com/posts/{post_id}\")\n","        if delete_response.status_code == 200:\n","            print(\"Пост успешно удален.\")\n","        else:\n","            print(f\"Ошибка при удалении поста. Статус-код: {delete_response.status_code}\")\n","\n","except ValueError:\n","    print(\"Пожалуйста, введите корректный числовой ID.\")"],"metadata":{"id":"jZUIdwq96DNl","colab":{"base_uri":"https://localhost:8080/","height":547},"executionInfo":{"status":"error","timestamp":1730549716686,"user_tz":-300,"elapsed":10656,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"efc15c52-9b5d-4f41-8b79-d3bcd00ce581"},"execution_count":8,"outputs":[{"name":"stdout","output_type":"stream","text":["Всего постов: 100\n","Введите ID поста для получения информации: 56\n","Информация о посте:\n","ID: 56\n","Заголовок: qui et at rerum necessitatibus\n","Содержимое: aut est omnis dolores\n","neque rerum quod ea rerum velit pariatur beatae excepturi\n","et provident voluptas corrupti\n","corporis harum reprehenderit dolores eligendi\n","Автор ID: 6\n","Введите заголовок нового поста: рн\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-a1e52621476b>\u001b[0m in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0mtitle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите заголовок нового поста: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите содержимое нового поста: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m     \u001b[0muser_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите ID пользователя (например, 10): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"r644mxqGy5-v"}},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики"],"metadata":{"id":"0UoRc9vOD3XT"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"markdown","source":["*Подсказка*\n","\n","\n","\n","```\n","import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = <____>\n","response = <____>\n","        \n","if response.<______> == <___>:\n","      image_url = response.json()['message']\n","\n","res = requests.<__>(image_url)\n","img = Image.open(io.BytesIO(res.content))\n","display(img)\n","```\n","\n"],"metadata":{"id":"yrKv5k13AKEP"}},{"cell_type":"code","source":["import requests\n","\n","def get_breeds():\n","    response = requests.get(\"https://dog.ceo/api/breeds/list/all\")\n","    if response.status_code == 200:\n","        breeds = response.json()[\"message\"]\n","        return breeds\n","    else:\n","        print(\"Ошибка при получении списка пород.\")\n","        return {}\n","\n","\n","def get_dog_images(breeds):\n","    for breed in breeds:\n","        response = requests.get(f\"https://dog.ceo/api/breed/{breed}/images/random\")\n","        if response.status_code == 200:\n","            image_url = response.json()[\"message\"]\n","            print(f\"Порода: {breed.capitalize()}, Изображение: {image_url}\")\n","        else:\n","            print(f\"Не удалось получить изображение для породы: {breed}\")\n","\n","\n","def main():\n","    breeds = get_breeds()\n","    print(\"Список пород собак:\")\n","    for index, breed in enumerate(breeds.keys(), start=1):\n","        print(f\"{index}. {breed.capitalize()}\")\n","    user_input = input(\"Введите породы собак через запятую: \")\n","    selected_breeds = [breed.strip().lower() for breed in user_input.split(\",\") if breed.strip().lower() in breeds]\n","    if selected_breeds:\n","        print(\"nПолучаем изображения для выбранных пород:\")\n","        get_dog_images(selected_breeds)\n","    else:\n","        print(\"Вы не ввели корректные породы.\")\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"5xti3KRP4Kzp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730549777325,"user_tz":-300,"elapsed":6460,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"c2bc2949-eb67-448e-9631-add11eb201fa"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Список пород собак:\n","1. Affenpinscher\n","2. African\n","3. Airedale\n","4. Akita\n","5. Appenzeller\n","6. Australian\n","7. Bakharwal\n","8. Basenji\n","9. Beagle\n","10. Bluetick\n","11. Borzoi\n","12. Bouvier\n","13. Boxer\n","14. Brabancon\n","15. Briard\n","16. Buhund\n","17. Bulldog\n","18. Bullterrier\n","19. Cattledog\n","20. Cavapoo\n","21. Chihuahua\n","22. Chippiparai\n","23. Chow\n","24. Clumber\n","25. Cockapoo\n","26. Collie\n","27. Coonhound\n","28. Corgi\n","29. Cotondetulear\n","30. Dachshund\n","31. Dalmatian\n","32. Dane\n","33. Danish\n","34. Deerhound\n","35. Dhole\n","36. Dingo\n","37. Doberman\n","38. Elkhound\n","39. Entlebucher\n","40. Eskimo\n","41. Finnish\n","42. Frise\n","43. Gaddi\n","44. Germanshepherd\n","45. Greyhound\n","46. Groenendael\n","47. Havanese\n","48. Hound\n","49. Husky\n","50. Keeshond\n","51. Kelpie\n","52. Kombai\n","53. Komondor\n","54. Kuvasz\n","55. Labradoodle\n","56. Labrador\n","57. Leonberg\n","58. Lhasa\n","59. Malamute\n","60. Malinois\n","61. Maltese\n","62. Mastiff\n","63. Mexicanhairless\n","64. Mix\n","65. Mountain\n","66. Mudhol\n","67. Newfoundland\n","68. Otterhound\n","69. Ovcharka\n","70. Papillon\n","71. Pariah\n","72. Pekinese\n","73. Pembroke\n","74. Pinscher\n","75. Pitbull\n","76. Pointer\n","77. Pomeranian\n","78. Poodle\n","79. Pug\n","80. Puggle\n","81. Pyrenees\n","82. Rajapalayam\n","83. Redbone\n","84. Retriever\n","85. Ridgeback\n","86. Rottweiler\n","87. Saluki\n","88. Samoyed\n","89. Schipperke\n","90. Schnauzer\n","91. Segugio\n","92. Setter\n","93. Sharpei\n","94. Sheepdog\n","95. Shiba\n","96. Shihtzu\n","97. Spaniel\n","98. Spitz\n","99. Springer\n","100. Stbernard\n","101. Terrier\n","102. Tervuren\n","103. Vizsla\n","104. Waterdog\n","105. Weimaraner\n","106. Whippet\n","107. Wolfhound\n","Введите породы собак через запятую: 43\n","Вы не ввели корректные породы.\n"]}]}]}