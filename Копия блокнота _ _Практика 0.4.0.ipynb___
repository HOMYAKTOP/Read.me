{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"13WKfsd7k2VhFKrt2W7NcKpDM-LJJaG_p","timestamp":1730136174971},{"file_id":"1n7P6I-ZGWKLEjIx697erdsZLv3xjeR25","timestamp":1728474880905},{"file_id":"1ZwSBZ3XI_wE-I4fLWA5wTMNwpfTDz2ov","timestamp":1728468118334}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Введите ваше ФИО:"],"metadata":{"id":"k8oVfdwrMXyc"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"5mcBLsKMI1-5"},"outputs":[],"source":["Скареднов Никита Андреевич"]},{"cell_type":"markdown","source":["***Дисклеймер***\n","\n","В данной практике запрещено использования функций:\n","\n","\n","*   sum()\n","*   min()\n","*   max()\n","*   average()\n","*   reversed()\n","*   sorted()\n","*   готовые функции или библиотеки\n"],"metadata":{"id":"8HbYUbm3Jw3o"}},{"cell_type":"markdown","source":["\n","**Задача 1:**\n","\n","\n","\n","Интернет-магазин предлагает следующие условия скидок:\n","\n","*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).\n","*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).\n","\n","Этап 1:\n","Ввод:\n","```\n","Введите стоимость единицы товара: 5\n","Введите количество товара: 1001\n","Введите промокод: GiVEMEDISCONT\n","```\n","\n","Вывод:\n","\n","```\n","Ваша скидка: 5%\n","Итоговая сумма: 4750.0\n","```\n","Этап 2:\n","\n","Оформите ваш код в виде функции"],"metadata":{"id":"HmX0c6YPJSQr"}},{"cell_type":"code","source":["def calc_discount(unit_price, quantity, promocode):\n","    discount = 0\n","    if quantity > 5000:\n","        discount = 15\n","        if promocode == \"SUPERDISCOUNT\":\n","            discount = 20;\n","    elif quantity > 1000:\n","        discount = 5\n","        if promocode == \"SUPERDISCOUNT\":\n","            discount = 10\n","    total_price = unit_price * quantity\n","    discount_amount = total_price * discount / 100\n","    final_price = total_price - discount_amount\n","\n","    print(f\"Ваша скидка: {discount}%\")\n","    print(f\"Итоговая сумма: {final_price: .2f}\")\n","\n","unit_price = float(input(\"Введите стоимость единицы товара: \"))\n","quantity = int(input(\"Введите количество товара: \"))\n","promocode = input(\"Введите промокод: \")\n","\n","calc_discount(unit_price, quantity, promocode)"],"metadata":{"id":"OAIMIpklMN5D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728469885924,"user_tz":-300,"elapsed":8837,"user":{"displayName":"Cwel 123","userId":"11088421249323160650"}},"outputId":"3387f1c3-24e2-4488-a13e-7ee811717be2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите стоимость единицы товара: 5\n","Введите количество товара: 1001\n","Введите промокод: SUPERDISCOUNT\n","Ваша скидка: 10%\n","Итоговая сумма:  4504.50\n"]}]},{"cell_type":"markdown","source":["**Задача 2:**\n","\n","Этап 1:\n","Напишите программу способную отфильтровать список и вывести только положительные элементы\n","\n","\n","Ввод:\n","```\n","-1 5 1 2 -3\n","```\n","\n","Вывод:\n","\n","```\n","5 1 2\n","```\n","\n","Этап 2:\n","\n","Оформите ваш код в виде функции"],"metadata":{"id":"eeRVWpuLNGJ0"}},{"cell_type":"code","source":["def filter_pl_numbers(numbers):\n","    pl_numbers = []\n","    for number in numbers:\n","        if number > 0:\n","            pl_numbers.append(number)\n","\n","    for num in pl_numbers:\n","        print(num, end=' ')\n","\n","numbers = list(map(int, input(\"Введите числа через пробел: \").split()))\n","\n","filter_pl_numbers(numbers)"],"metadata":{"id":"Xbi6bL0WOE9N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728470381747,"user_tz":-300,"elapsed":8937,"user":{"displayName":"Cwel 123","userId":"11088421249323160650"}},"outputId":"b13886dd-0e26-4990-f265-732b9b889aa3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите числа через пробел: -1 -2 -3 -4 -5 55\n","55 "]}]},{"cell_type":"markdown","source":["**Задача 3:**\n","\n","Этап 1:\n","Напишите программу реализующую Алгоритм Евклида\n","\n","\n","> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.\n","\n","\n","\n","Ввод:\n","```\n","30 18\n","```\n","\n","Вывод:\n","\n","```\n","6\n","```\n","\n","Этап 2:\n","Оформите ваш код в виде функции\n"],"metadata":{"id":"lV-w6G-POa6F"}},{"cell_type":"code","source":["def algorithm(a,b):\n","    while b != 0:\n","        a, b = b, a % b\n","    return a\n","\n","a, b = map(int, input(\"Введите два числа через пробел: \").split())\n","\n","nod = algorithm(a, b)\n","print(f\"НОД: {nod}\")\n"],"metadata":{"id":"3uKTQ2P-3iDM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728471012000,"user_tz":-300,"elapsed":7713,"user":{"displayName":"Cwel 123","userId":"11088421249323160650"}},"outputId":"447868d1-f432-402b-9017-4f8cfd2e4ba8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите два числа через пробел: 21 14\n","НОД: 7\n"]}]},{"cell_type":"markdown","source":["**Задача 4:**\n","\n","Этап 1:\n","Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении\n","\n","Этап 2:\n","Оформите ваш код в виде функции\n","\n","Ввод:\n","```\n","apple banana apple\n","```\n","\n","Вывод:\n","\n","```\n","apple: 2,\n","banana: 1\n","```"],"metadata":{"id":"WIfPFxpsO0zL"}},{"cell_type":"code","source":["def word_count(sentence):\n","    words = sentence.split()\n","    word_dict = {}\n","\n","\n","    for word in words:\n","        if word in word_dict:\n","            word_dict[word] += 1\n","        else:\n","            word_dict[word] = 1\n","\n","    for word, count in word_dict.items():\n","        print(f\"{word}: {count}\")\n","\n","\n","sentence = input(\"Введите строку: \")\n","word_count(sentence)"],"metadata":{"id":"DgsmFeW5Po_x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728471434036,"user_tz":-300,"elapsed":16080,"user":{"displayName":"Cwel 123","userId":"11088421249323160650"}},"outputId":"18da4f3e-7185-4ff6-e4cc-94978f844502"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите строку: банан яблоко банан \n","банан: 2\n","яблоко: 1\n"]}]},{"cell_type":"markdown","source":["**Задача 5:**\n","\n","Этап 1:\n","Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга\n","\n","Этап 2:\n","Оформите ваш код в виде функции\n","\n","Ввод:\n","```\n","listen, silent\n","```\n","\n","Вывод:\n","\n","```\n","True\n","```"],"metadata":{"id":"5BmIJLUZP9I-"}},{"cell_type":"code","source":["def are_anagrams(str1, str2):\n","    str1 = str1.lower()\n","    str2 = str2.lower()\n","\n","\n","    if len(str1) != len(str2):\n","        return False\n","    char_count = {}\n","    for char in str1:\n","        if char != ' ':\n","            char_count[char] = char_count.get(char, 0) + 1\n","    for char in str2:\n","        if char != ' ':\n","            if char in char_count:\n","                char_count[char] -= 1\n","            else:\n","                return False\n","    return all(count == 0 for count in char_count.values())\n","string1 = input(\"Введите первую строку: \")\n","string2 = input(\"Введите вторую строку: \")\n","if are_anagrams(string1, string2):\n","    print(f'\"{string1}\" и \"{string2}\" являются анаграммами.')\n","else:\n","    print(f'\"{string1}\" и \"{string2}\" не являются анаграммами.')"],"metadata":{"id":"7LNW8DuHQJwH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728473715655,"user_tz":-300,"elapsed":13128,"user":{"displayName":"Cwel 123","userId":"11088421249323160650"}},"outputId":"8607983b-47de-4cab-ed5f-f56ba003577a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите первую строку: здраво\n","Введите вторую строку: не здраво\n","\"здраво\" и \"не здраво\" не являются анаграммами.\n"]}]},{"cell_type":"markdown","source":["**Задача 6:**\n","\n","Шифр ​​Цезаря\n","\n","Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.\n","\n","Этап 1:\n","\n","Напишите код для реализации данной задачи\n","\n","Этап 2:\n","\n","Оформите код в виде нескольких функций:\n","\n","* Зашифровывает сообщение\n","* Расшифровывает сообщение"],"metadata":{"id":"-SIWYSq2QKBh"}},{"cell_type":"code","source":["\n","def caesar_encrypt(message, shift):\n","    encrypted_message = \"\"\n","    for char in message:\n","        if char.isalpha():\n","            shift_base = ord('A') if char.isupper() else ord('a')\n","            encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base)\n","            encrypted_message += encrypted_char\n","        else:\n","            encrypted_message += char\n","    return encrypted_message\n","def caesar_decrypt(encrypted_message, shift):\n","    decrypted_message = \"\"\n","    for char in encrypted_message:\n","        if char.isalpha():\n","            shift_base = ord('A') if char.isupper() else ord('a')\n","            decrypted_char = chr((ord(char) - shift_base - shift) % 26 + shift_base)\n","            decrypted_message += decrypted_char\n","        else:\n","            decrypted_message += char\n","    return decrypted_message\n","\n","\n","def main():\n","    message = input(\"Введите сообщение для шифрования: \")\n","    shift = int(input(\"Введите значение сдвига: \"))\n","    encrypted_message = caesar_encrypt(message, shift)\n","    print(f\"Зашифрованное сообщение: {encrypted_message}\")\n","    decrypted_message = caesar_decrypt(encrypted_message, shift)\n","    print(f\"Расшифрованное сообщение: {decrypted_message}\")\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"anThYirsQe6N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728475129815,"user_tz":-300,"elapsed":42608,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"555e284d-0af9-417c-d629-808ecab89414"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите сообщение для шифрования: шол\n","Введите значение сдвига: 4\n","Зашифрованное сообщение: pfc\n","Расшифрованное сообщение: lby\n"]}]},{"cell_type":"markdown","source":["**Задача 7**\n","\n","Задача: «Банковская система»\n","\n","Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:\n","\n","Требования\n","*   Система должна позволять клиентам создавать счета и хранить их балансы.\n","*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.\n","*   Система должна позволять клиентам проверять свой текущий баланс.\n","*   Система должна позволять клиентам переводить деньги между счетами.\n","*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.\n","\n","\n","Задачи\n","1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.\n","Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.\n","2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.\n","3. Бонусное задание\n","Реализуйте способ хранения и печати истории транзакций для каждого счета.\n","\n","Ограничения\n","Не используйте классы или словари.\n","Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.\n"],"metadata":{"id":"avFZRRXrQz9O"}},{"cell_type":"code","source":["accounts = []\n","transactions = []\n","\n","def create_account(name, initial_balance):\n","    accounts.append([name, initial_balance])\n","    transactions.append([f\"Счет создан: {name}, начальный баланс: {initial_balance}\"])\n","\n","def deposit(account_index, amount):\n","    if amount > 0:\n","        accounts[account_index][1] += amount\n","        transactions.append([f\"Депозит: {accounts[account_index][0]}, сумма: {amount}\"])\n","        print(f\"Депозит на счет {accounts[account_index][0]} успешно выполнен.\")\n","    else:\n","        print(\"Сумма депозита должна быть положительной.\")\n","\n","def withdraw(account_index, amount):\n","    if 0 < amount <= accounts[account_index][1]:\n","        accounts[account_index][1] -= amount\n","        transactions.append([f\"Снятие: {accounts[account_index][0]}, сумма: {amount}\"])\n","        print(f\"Снятие со счета {accounts[account_index][0]} успешно выполнено.\")\n","    else:\n","        print(\"Недостаточно средств или неверная сумма снятия.\")\n","\n","def check_balance(account_index):\n","    return accounts[account_index][1]\n","\n","def transfer(from_account_index, to_account_index, amount):\n","    if 0 < amount <= accounts[from_account_index][1]:\n","        accounts[from_account_index][1] -= amount\n","        accounts[to_account_index][1] += amount\n","        transactions.append([f\"Перевод: {accounts[from_account_index][0]} -> {accounts[to_account_index][0]}, сумма: {amount}\"])\n","        print(f\"Перевод со счета {accounts[from_account_index][0]} на счет {accounts[to_account_index][0]} успешно выполнен.\")\n","    else:\n","        print(\"Недостаточно средств или неверная сумма перевода.\")\n","\n","def print_transactions():\n","    for transaction in transactions:\n","        print(transaction[0])\n","\n","def main():\n","    create_account(\"Alice\", 1000)\n","    create_account(\"Bob\", 500)\n","\n","    deposit(0, 200)\n","    withdraw(1, 100)\n","    transfer(0, 1, 300)\n","\n","    print(f\"Баланс Alice: {check_balance(0)}\")\n","    print(f\"Баланс Bob: {check_balance(1)}\")\n","    print(\"nИстория транзакций:\")\n","    print_transactions()\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dWEW10zIRwjs","executionInfo":{"status":"ok","timestamp":1730136391499,"user_tz":-300,"elapsed":579,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"13fc52e3-a58c-4eff-cc25-0364880b406e"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Депозит на счет Alice успешно выполнен.\n","Снятие со счета Bob успешно выполнено.\n","Перевод со счета Alice на счет Bob успешно выполнен.\n","Баланс Alice: 900\n","Баланс Bob: 700\n","nИстория транзакций:\n","Счет создан: Alice, начальный баланс: 1000\n","Счет создан: Bob, начальный баланс: 500\n","Депозит: Alice, сумма: 200\n","Снятие: Bob, сумма: 100\n","Перевод: Alice -> Bob, сумма: 300\n"]}]}]}