{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1731250746584}],"collapsed_sections":["ra45s33wUt-C","ia9UtA0cU1Iy","eecUb-akU1ji","QGrsZrv5U1s8"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":3,"metadata":{"id":"wGeJM9n4UqUD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731252018565,"user_tz":-300,"elapsed":14862,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"83638118-e1c6-4a1e-b2b3-d404b64028d6"},"outputs":[{"output_type":"stream","name":"stdout","text":["nВыберите опцию:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей (ОСЗ)\n","4. Данные о космической погоде\n","5. Выход\n","Введите номер опции: 3\n","Введите дату в формате YYYY-MM-DD: 345\n","Ошибка при получении данных об ОСЗ.\n","nВыберите опцию:\n","1. Астрономическая картинка дня (APOD)\n","2. Фотографии с марсохода\n","3. Объекты, сближающиеся с Землей (ОСЗ)\n","4. Данные о космической погоде\n","5. Выход\n","Введите номер опции: 5\n","Выход из приложения.\n"]}],"source":["import requests\n","\n","API_KEY = 'G8Q2KYh1NbGolzpayYiBZCi9pbOdtUeTipdfiE8x'\n","\n","def get_apod():\n","    response = requests.get(f'https://api.nasa.gov/planetary/apod?api_key={API_KEY}')\n","    if response.status_code == 200:\n","        data = response.json()\n","        print(\"Астрономическая картинка дня:\")\n","        print(data['title'])\n","        print(data['explanation'])\n","        print(data['url'])\n","    else:\n","        print(\"Ошибка при получении APOD.\")\n","\n","def get_mars_photos(sol, camera):\n","    response = requests.get(f'https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol={sol}&camera={camera}&api_key={API_KEY}')\n","    if response.status_code == 200:\n","        data = response.json()\n","        photos = data.get('photos', [])\n","        if photos:\n","            print(f\"Фотографии с марсохода Curiosity для sol {sol} и камеры {camera}:\")\n","            for photo in photos:\n","                print(photo['img_src'])\n","        else:\n","            print(\"Нет фотографий для указанных параметров.\")\n","    else:\n","        print(\"Ошибка при получении фотографий с марсохода.\")\n","\n","def get_near_earth_objects(date):\n","    response = requests.get(f'https://api.nasa.gov/neo/rest/v1/feed?start_date={date}&end_date={date}&api_key={API_KEY}')\n","    if response.status_code == 200:\n","        data = response.json()\n","        neos = data['near_earth_objects'].get(date, [])\n","        if neos:\n","            print(f\"Объекты, сближающиеся с Землей на {date}:\")\n","            for neo in neos:\n","                print(f\"{neo['name']} - Размер: {neo['estimated_diameter']['meters']['estimated_diameter_max']} м - Потенциальная опасность: {neo['is_potentially_hazardous_asteroid']}\")\n","        else:\n","            print(\"Нет объектов на указанную дату.\")\n","    else:\n","        print(\"Ошибка при получении данных об ОСЗ.\")\n","\n","def get_space_weather():\n","    response = requests.get(f'https://api.nasa.gov/DONKI/GST?startDate=2023-01-01&endDate=2023-10-01&api_key={API_KEY}')\n","    if response.status_code == 200:\n","        data = response.json()\n","        if data:\n","            print(\"Данные о космической погоде:\")\n","            for event in data:\n","                print(f\"{event['beginTime']} - {event['activityType']}\")\n","        else:\n","            print(\"Нет данных о космической погоде.\")\n","    else:\n","        print(\"Ошибка при получении данных о космической погоде.\")\n","\n","def main():\n","    while True:\n","        print(\"nВыберите опцию:\")\n","        print(\"1. Астрономическая картинка дня (APOD)\")\n","        print(\"2. Фотографии с марсохода\")\n","        print(\"3. Объекты, сближающиеся с Землей (ОСЗ)\")\n","        print(\"4. Данные о космической погоде\")\n","        print(\"5. Выход\")\n","\n","        choice = input(\"Введите номер опции: \")\n","\n","        if choice == '1':\n","            get_apod()\n","        elif choice == '2':\n","            sol = input(\"Введите sol (день на Марсе): \")\n","            camera = input(\"Введите тип камеры (например, 'FHAZ', 'RHAZ', 'CHEMCAM', 'NAVCAM'): \")\n","            get_mars_photos(sol, camera)\n","        elif choice == '3':\n","            date = input(\"Введите дату в формате YYYY-MM-DD: \")\n","            get_near_earth_objects(date)\n","        elif choice == '4':\n","            get_space_weather()\n","        elif choice == '5':\n","            print(\"Выход из приложения.\")\n","            break\n","        else:\n","            print(\"Неверный ввод. Пожалуйста, попробуйте еще раз.\")\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":5,"metadata":{"id":"jjUH1GznU1Iy","colab":{"base_uri":"https://localhost:8080/","height":408},"executionInfo":{"status":"error","timestamp":1731252943423,"user_tz":-300,"elapsed":427312,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"dca1813b-820a-42cc-92ed-ca6b2f870c8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["nВыберите действие:\n","1. Просмотреть произведения искусства\n","2. Фильтровать по имени художника\n","3. Выход\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-8c48185ebb9f>\u001b[0m in \u001b[0;36m<cell line: 80>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-5-8c48185ebb9f>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     34\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"3. Выход\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m         \u001b[0mchoice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите номер действия: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'1'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}],"source":["import requests\n","\n","API_URL = \"https://api.artic.edu/api/v1/artworks\"\n","\n","def fetch_artworks(page=1):\n","    \"\"\"Извлекает список произведений искусства с указанной страницы.\"\"\"\n","    response = requests.get(f\"{API_URL}?page={page}&limit=10\")\n","    if response.status_code == 200:\n","        data = response.json()\n","        return data['data'], data['pagination']\n","    else:\n","        print(\"Ошибка при извлечении произведений искусства.\")\n","        return [], {}\n","\n","def filter_artworks_by_artist(artworks, artist_name):\n","    \"\"\"Фильтрует произведения искусства по имени художника.\"\"\"\n","    filtered_artworks = [art for art in artworks if artist_name.lower() in art['artist_title'].lower()]\n","    return filtered_artworks\n","\n","def display_artwork_details(artwork):\n","    \"\"\"Отображает подробную информацию о произведении искусства.\"\"\"\n","    print(f\"Название: {artwork['title']}\")\n","    print(f\"Исполнитель: {artwork['artist_title']}\")\n","    print(f\"Дата: {artwork['date_display']}\")\n","    print(f\"Носитель: {artwork['medium_display']}\")\n","    print(f\"Описание: {artwork['description']}n\")\n","\n","def main():\n","    current_page = 1\n","    while True:\n","        print(\"nВыберите действие:\")\n","        print(\"1. Просмотреть произведения искусства\")\n","        print(\"2. Фильтровать по имени художника\")\n","        print(\"3. Выход\")\n","\n","        choice = input(\"Введите номер действия: \")\n","\n","        if choice == '1':\n","            artworks, pagination = fetch_artworks(current_page)\n","            if artworks:\n","                for index, artwork in enumerate(artworks):\n","                    print(f\"{index + 1}. {artwork['title']} (Исполнитель: {artwork['artist_title']})\")\n","\n","                while True:\n","                    artwork_choice = input(\"Введите номер произведения для просмотра деталей или 'n' для следующей страницы, 'p' для предыдущей страницы: \")\n","                    if artwork_choice.lower() == 'n':\n","                        if pagination['has_next']:\n","                            current_page += 1\n","                            break\n","                        else:\n","                            print(\"Нет следующей страницы.\")\n","                    elif artwork_choice.lower() == 'p':\n","                        if pagination['has_previous']:\n","                            current_page -= 1\n","                            break\n","                        else:\n","                            print(\"Нет предыдущей страницы.\")\n","                    elif artwork_choice.isdigit() and 1 <= int(artwork_choice) <= len(artworks):\n","                        display_artwork_details(artworks[int(artwork_choice) - 1])\n","                    else:\n","                        print(\"Неверный ввод. Пожалуйста, попробуйте снова.\")\n","\n","        elif choice == '2':\n","            artist_name = input(\"Введите имя художника для фильтрации: \")\n","            artworks, _ = fetch_artworks(current_page)\n","            filtered_artworks = filter_artworks_by_artist(artworks, artist_name)\n","            if filtered_artworks:\n","                for index, artwork in enumerate(filtered_artworks):\n","                    print(f\"{index + 1}. {artwork['title']} (Исполнитель: {artwork['artist_title']})\")\n","            else:\n","                print(\"Нет произведений искусства от этого художника.\")\n","\n","        elif choice == '3':\n","            print(\"Выход из программы.\")\n","            break\n","\n","        else:\n","            print(\"Неверный ввод. Пожалуйста, попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":["import requests\n","import json\n","from datetime import datetime, timedelta\n","\n","class CryptoPortfolio:\n","    def __init__(self):\n","        self.portfolio = {}\n","        self.base_url = \"https://api.coingecko.com/api/v3\"\n","\n","    def get_current_price(self, currency):\n","        response = requests.get(f\"{self.base_url}/simple/price?ids={','.join(self.portfolio.keys())}&vs_currencies={currency}&include_24hr_change=true\")\n","        return response.json()\n","\n","    def add_to_portfolio(self, crypto, amount):\n","        if crypto in self.portfolio:\n","            self.portfolio[crypto] += amount\n","        else:\n","            self.portfolio[crypto] = amount\n","        print(f\"Добавлено {amount} {crypto} в портфель.\")\n","\n","    def remove_from_portfolio(self, crypto, amount):\n","        if crypto in self.portfolio:\n","            if self.portfolio[crypto] >= amount:\n","                self.portfolio[crypto] -= amount\n","                print(f\"Удалено {amount} {crypto} из портфеля.\")\n","                if self.portfolio[crypto] == 0:\n","                    del self.portfolio[crypto]\n","            else:\n","                print(\"Недостаточно криптовалюты для удаления.\")\n","        else:\n","            print(\"Криптовалюта не найдена в портфеле.\")\n","\n","    def calculate_total_value(self, currency):\n","        prices = self.get_current_price(currency)\n","        total_value = 0\n","        for crypto, amount in self.portfolio.items():\n","            if crypto in prices:\n","                total_value += prices[crypto][currency] * amount\n","        return total_value\n","\n","    def display_price_changes(self):\n","        prices = self.get_current_price('usd')\n","        for crypto in self.portfolio.keys():\n","            change = prices[crypto]['usd_24h_change']\n","            print(f\"{crypto}: {change:.2f}% изменение за 24 часа\")\n","\n","    def get_historical_data(self, crypto):\n","        end_date = datetime.now()\n","        start_date = end_date - timedelta(days=7)\n","        response = requests.get(f\"{self.base_url}/coins/{crypto}/market_chart/range?vs_currency=usd&from={start_date.timestamp()}&to={end_date.timestamp()}\")\n","        data = response.json()\n","\n","        if 'prices' in data:\n","            print(f\"Исторические данные для {crypto} за последнюю неделю:\")\n","            for price_data in data['prices']:\n","                price_time = datetime.fromtimestamp(price_data[0] / 1000)\n","                price_value = price_data[1]\n","                print(f\"{price_time.strftime('%Y-%m-%d %H:%M:%S')} - ${price_value:.2f}\")\n","\n","def main():\n","    portfolio = CryptoPortfolio()\n","\n","    while True:\n","        print(\"Выберите действие:\")\n","        print(\"1. Добавить криптовалюту в портфель\")\n","        print(\"2. Удалить криптовалюту из портфеля\")\n","        print(\"3. Просмотреть общую стоимость портфеля\")\n","        print(\"4. Отобразить изменения цен за 24 часа\")\n","        print(\"5. Получить исторические данные о ценах\")\n","        print(\"6. Выход\")\n","\n","        choice = input(\"Введите номер действия: \")\n","\n","        if choice == '1':\n","            crypto = input(\"Введите символ криптовалюты (например, bitcoin): \")\n","            amount = float(input(\"Введите количество: \"))\n","            portfolio.add_to_portfolio(crypto, amount)\n","\n","        elif choice == '2':\n","            crypto = input(\"Введите символ криптовалюты (например, bitcoin): \")\n","            amount = float(input(\"Введите количество для удаления: \"))\n","            portfolio.remove_from_portfolio(crypto, amount)\n","\n","        elif choice == '3':\n","            currency = input(\"Введите валюту (например, usd): \")\n","            total_value = portfolio.calculate_total_value(currency)\n","            print(f\"Общая стоимость портфеля: {total_value:.2f} {currency.upper()}\")\n","\n","        elif choice == '4':\n","            portfolio.display_price_changes()\n","\n","        elif choice == '5':\n","            crypto = input(\"Введите символ криптовалюты (например, bitcoin): \")\n","            portfolio.get_historical_data(crypto)\n","\n","        elif choice == '6':\n","            print(\"Выход из программы.\")\n","            break\n","\n","        else:\n","            print(\"Неверный ввод. Пожалуйста, попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"_0DToTqlvywa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731252969688,"user_tz":-300,"elapsed":16026,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"485bdc80-7ab0-49c1-de7a-fdf38d610b65"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Выберите действие:\n","1. Добавить криптовалюту в портфель\n","2. Удалить криптовалюту из портфеля\n","3. Просмотреть общую стоимость портфеля\n","4. Отобразить изменения цен за 24 часа\n","5. Получить исторические данные о ценах\n","6. Выход\n","Введите номер действия: 3\n","Введите валюту (например, usd): 4\n","Общая стоимость портфеля: 0.00 4\n","Выберите действие:\n","1. Добавить криптовалюту в портфель\n","2. Удалить криптовалюту из портфеля\n","3. Просмотреть общую стоимость портфеля\n","4. Отобразить изменения цен за 24 часа\n","5. Получить исторические данные о ценах\n","6. Выход\n","Введите номер действия: 6\n","Выход из программы.\n"]}]},{"cell_type":"markdown","source":["# Дополнительно: Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]},{"cell_type":"code","source":["import requests\n","\n","class WeatherApp:\n","    def __init__(self, api_key):\n","        self.api_key = api_key\n","        self.base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n","\n","    def get_weather(self, city):\n","        params = {\n","            'q': city,\n","            'appid': self.api_key,\n","            'units': 'metric'\n","        }\n","        response = requests.get(self.base_url, params=params)\n","        return response.json()\n","\n","    def display_weather(self, city):\n","        data = self.get_weather(city)\n","        if data.get('cod') != 200:\n","            print(f\"Ошибка: {data.get('message')}\")\n","            return\n","        print(f\"nПогода в {city}:\")\n","        print(f\"Температура: {data['main']['temp']}°C\")\n","        print(f\"Описание: {data['weather'][0]['description']}\")\n","        print(f\"Влажность: {data['main']['humidity']}%\")\n","        print(f\"Скорость ветра: {data['wind']['speed']} м/с\")\n","\n","    def get_forecast(self):\n","        print(\"nПрогноз погоды на 5 дней (функция не реализована в этом проекте).\")\n","\n","    def get_weather_by_coordinates(self, lat, lon):\n","        params = {\n","            'lat': lat,\n","            'lon': lon,\n","            'appid': self.api_key,\n","            'units': 'metric'\n","        }\n","        response = requests.get(self.base_url, params=params)\n","        return response.json()\n","\n","    def display_weather_by_coordinates(self, lat, lon):\n","        data = self.get_weather_by_coordinates(lat, lon)\n","        if data.get('cod') != 200:\n","            print(f\"Ошибка: {data.get('message')}\")\n","            return\n","        print(f\"nПогода по координатам ({lat}, {lon}):\")\n","        print(f\"Температура: {data['main']['temp']}°C\")\n","        print(f\"Описание: {data['weather'][0]['description']}\")\n","        print(f\"Влажность: {data['main']['humidity']}%\")\n","        print(f\"Скорость ветра: {data['wind']['speed']} м/с\")\n","\n","def main():\n","    api_key = input(\"Введите ваш API-ключ OpenWeatherMap: \")\n","    weather_app = WeatherApp(api_key)\n","\n","    while True:\n","        print(\"nВыберите действие:\")\n","        print(\"1. Получить погоду по городу\")\n","        print(\"2. Получить погоду по координатам\")\n","        print(\"3. Получить прогноз погоды на 5 дней (не реализовано)\")\n","        print(\"4. Выход\")\n","\n","        choice = input(\"Введите номер действия: \")\n","\n","        if choice == '1':\n","            city = input(\"Введите название города: \")\n","            weather_app.display_weather(city)\n","\n","        elif choice == '2':\n","            lat = float(input(\"Введите широту: \"))\n","            lon = float(input(\"Введите долготу: \"))\n","            weather_app.display_weather_by_coordinates(lat, lon)\n","\n","        elif choice == '3':\n","            weather_app.get_forecast()\n","\n","        elif choice == '4':\n","            print(\"Выход из программы.\")\n","            break\n","\n","        else:\n","            print(\"Неверный ввод. Пожалуйста, попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JL7I3NsPubpQ","executionInfo":{"status":"ok","timestamp":1731254054569,"user_tz":-300,"elapsed":27131,"user":{"displayName":"Никита Скареднов","userId":"16510099658228958990"}},"outputId":"2825516d-5d85-4bd9-b37f-732701d40ec2"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите ваш API-ключ OpenWeatherMap: G8Q2KYh1NbGolzpayYiBZCi9pbOdtUeTipdfiE8x\n","nВыберите действие:\n","1. Получить погоду по городу\n","2. Получить погоду по координатам\n","3. Получить прогноз погоды на 5 дней (не реализовано)\n","4. Выход\n","Введите номер действия: 4\n","Выход из программы.\n"]}]}]}